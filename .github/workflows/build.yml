name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'rel/v**'
      - 'dev/**'
  pull_request:
    branches: [ "main", "dev/**" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        dotnet-configuration: [ 'Release' ]
        dotnet-arch: ['x64' ] # TODO: enable arm64' ]
    name: Build MSIX - win-${{ matrix.dotnet-arch }}
    runs-on: windows-2025
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
    - name: Install NBGV tool
      run: dotnet tool install --tool-path . nbgv
    - name: Set Version
      run: ./nbgv cloud -c
    - name: Update Package Manifest Version
      run: |
        $manifestPath = "${{ github.workspace }}\AIDevGallery\Package.appxmanifest"
        [xml]$manifest = get-content $manifestPath
        $manifest.Package.Identity.Version = '${{ env.GitBuildVersionSimple }}.0'
        $manifest.Save($manifestPath)
    - name: Generate LafConstants.cs
      shell: pwsh
      run: |
        $filePath = "D:/a/ai-dev-gallery/ai-dev-gallery/AIDevGallery/Generated/LafConstants.cs"
        $content = @(
            "// Copyright (c) Microsoft Corporation. All rights reserved."
            "// Licensed under the MIT License."
            ""
            "namespace AIDevGallery;"
            ""
            "/// <summary>"
            "/// Provides LAF-related constants."
            "/// </summary>"
            "public static class LafConstants"
            "{"
            "  /// <summary>"
            "  /// The authentication token for LAF."
            "  /// </summary>"
            "  public const string Token = `"$env:LAF_TOKEN`";"
            ""
            "  /// <summary>"
            "  /// The publisher ID for LAF."
            "  /// </summary>"
            "  public const string PublisherId = `"$env:LAF_PUBLISHER_ID`";"
            "}"
        )

        $content = $content | ForEach-Object { $_.TrimEnd() }
        while ($content.Count -gt 0 -and $content[-1] -eq "") {
            $content = $content[0..($content.Count - 2)]
        }
        $finalContent = $content -join "`n"
        $writer = [System.IO.StreamWriter]::new($filePath, $false, [System.Text.Encoding]::UTF8)
        for ($i = 0; $i -lt $content.Count; $i++) {
            if ($i -lt $content.Count - 1) {
                $writer.WriteLine($content[$i])
            } else {
                $writer.Write($content[$i])
            }
        }
        $writer.Close()

        Write-Output "Generated file path: D:/a/ai-dev-gallery/ai-dev-gallery/AIDevGallery/Generated"
            if (Test-Path $filePath) {
              Write-Output "File exists: $filePath"
            } else {
              Write-Output "File does not exist: $filePath"
            }
      env:
        LAF_TOKEN: ${{ secrets.LAF_TOKEN }}
        LAF_PUBLISHER_ID: ${{ secrets.LAF_PUBLISHER_ID }}
    - name: Restore dependencies
      run: dotnet restore AIDevGallery.sln -r win-${{ matrix.dotnet-arch }} /p:Configuration=${{ matrix.dotnet-configuration }} /p:Platform=${{ matrix.dotnet-arch }} /p:PublishReadyToRun=true /p:SelfContainedIfPreviewWASDK=true
    - name: Build
      run: |
        dotnet build AIDevGallery.Utils --no-restore /p:Configuration=${{ matrix.dotnet-configuration }}
        dotnet build AIDevGallery --no-restore -r win-${{ matrix.dotnet-arch }} -f net9.0-windows10.0.26100.0 /p:Configuration=${{ matrix.dotnet-configuration }} /p:Platform=${{ matrix.dotnet-arch }} /p:AppxPackageDir="AppPackages/" /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundle=Never /p:GenerateAppxPackageOnBuild=true /p:SelfContainedIfPreviewWASDK=true
    - name: Upload Artifact - MSIX
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-${{ matrix.dotnet-arch }}
        path: ${{ github.workspace }}/AIDevGallery/AppPackages/*_${{ matrix.dotnet-arch }}_Test/AIDevGallery_*_${{ matrix.dotnet-arch }}.msix
  test:
    strategy:
      fail-fast: false
      matrix:
        dotnet-configuration: [ 'Release' ]
        dotnet-arch: ['x64' ] # TODO: enable arm64' ]
    name: Test - win-${{ matrix.dotnet-arch }}
    runs-on: windows-2025
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
    - name: Install NBGV tool
      run: dotnet tool install --tool-path . nbgv
    - name: Set Version
      run: ./nbgv cloud -c
    - name: Update Package Manifest Version
      run: |
        $manifestPath = "${{ github.workspace }}\AIDevGallery\Package.appxmanifest"
        [xml]$manifest = get-content $manifestPath
        $manifest.Package.Identity.Version = '${{ env.GitBuildVersionSimple }}.0'
        $manifest.Save($manifestPath)
    - name: Generate LafConstants.cs
      shell: pwsh
      run: |
        $filePath = "D:/a/ai-dev-gallery/ai-dev-gallery/AIDevGallery/Generated/LafConstants.cs"
        $content = @(
            "// Copyright (c) Microsoft Corporation. All rights reserved."
            "// Licensed under the MIT License."
            ""
            "namespace AIDevGallery;"
            ""
            "/// <summary>"
            "/// Provides LAF-related constants."
            "/// </summary>"
            "public static class LafConstants"
            "{"
            "  /// <summary>"
            "  /// The authentication token for LAF."
            "  /// </summary>"
            "  public const string Token = `"$env:LAF_TOKEN`";"
            ""
            "  /// <summary>"
            "  /// The publisher ID for LAF."
            "  /// </summary>"
            "  public const string PublisherId = `"$env:LAF_PUBLISHER_ID`";"
            "}"
        )

        $content = $content | ForEach-Object { $_.TrimEnd() }
        while ($content.Count -gt 0 -and $content[-1] -eq "") {
            $content = $content[0..($content.Count - 2)]
        }
        $finalContent = $content -join "`n"
        $writer = [System.IO.StreamWriter]::new($filePath, $false, [System.Text.Encoding]::UTF8)
        for ($i = 0; $i -lt $content.Count; $i++) {
            if ($i -lt $content.Count - 1) {
                $writer.WriteLine($content[$i])
            } else {
                $writer.Write($content[$i])
            }
        }
        $writer.Close()

        Write-Output "Generated file path: D:/a/ai-dev-gallery/ai-dev-gallery/AIDevGallery/Generated"
            if (Test-Path $filePath) {
              Write-Output "File exists: $filePath"
            } else {
              Write-Output "File does not exist: $filePath"
            }
      env:
        LAF_TOKEN: ${{ secrets.LAF_TOKEN }}
        LAF_PUBLISHER_ID: ${{ secrets.LAF_PUBLISHER_ID }}
    - name: Restore dependencies
      run: dotnet restore AIDevGallery.sln -r win-${{ matrix.dotnet-arch }} /p:Configuration=${{ matrix.dotnet-configuration }} /p:Platform=${{ matrix.dotnet-arch }} /p:PublishReadyToRun=true
    - name: Build
      run: |
        dotnet build AIDevGallery.Utils --no-restore /p:Configuration=${{ matrix.dotnet-configuration }}
        dotnet build AIDevGallery --no-restore -r win-${{ matrix.dotnet-arch }} -f net9.0-windows10.0.26100.0 /p:Configuration=${{ matrix.dotnet-configuration }} /p:Platform=${{ matrix.dotnet-arch }}
    - name: Setup Dev Tools
      uses: ilammy/msvc-dev-cmd@v1
    - name: Build Tests
      run: dotnet build AIDevGallery.UnitTests -r win-${{ matrix.dotnet-arch }} -f net9.0-windows10.0.26100.0 /p:Configuration=${{ matrix.dotnet-configuration }} /p:Platform=${{ matrix.dotnet-arch }}
