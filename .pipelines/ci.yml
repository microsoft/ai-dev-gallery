trigger:
  branches:
    include:
      - main
      - main-private
      - dev/**
pr: none

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

parameters:
  - name: dotnet_configurations
    type: object
    default:
      - Release
  - name: platforms
    type: object
    default:
    - dotnet_platform: x64
      hostArchitecture: amd64
      pool_name: Azure-Pipelines-1ESPT-ExDShared
      pool_image: windows-latest
    - dotnet_platform: arm64
      hostArchitecture: arm64
      pool_name: wcrgallery_arm64_pool_v2
      pool_image: wcrgallery_arm64_1es_img

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        image: windows-latest
        os: windows
    stages:
    - stage: Build
      jobs:
      - ${{ each dotnet_config in parameters.dotnet_configurations }}:
        - ${{ each platform in parameters.platforms }}:
          - job: Build_${{ dotnet_config }}_${{ platform.dotnet_platform }}
            env:
              LAF_TOKEN: ${{ secrets.LAF_TOKEN }}
              LAF_PUBLISHER_ID: ${{ secrets.LAF_PUBLISHER_ID }}
            pool:
              name: ${{ platform.pool_name }}
              image: ${{ platform.pool_image }}
              os: windows
              hostArchitecture: ${{ platform.hostArchitecture }}
            steps:
              - checkout: self
              - task: UseDotNet@2
                displayName: Setup .NET 9
                condition: ${{ eq(platform.hostArchitecture, 'amd64') }}
                inputs:
                  version: 9.0.x
              - task: PowerShell@2
                displayName: Setup .NET 9
                condition: ${{ eq(platform.hostArchitecture, 'arm64') }}
                inputs:
                  targetType: 'inline'
                  script: |
                    Invoke-WebRequest "https://dot.net/v1/dotnet-install.ps1" -OutFile "./dotnet-install.ps1"
                    ./dotnet-install.ps1 -Version latest -Architecture arm64 -Channel 9.0 -InstallDir $(Agent.ToolsDirectory)/dotnet
                    echo '##vso[task.prependpath]$(Agent.ToolsDirectory)/dotnet'
                    echo '##vso[task.setvariable variable=DOTNET_ROOT;isOutput=false;issecret=false;]$(Agent.ToolsDirectory)/dotnet'
              - script: move /Y $(Build.SourcesDirectory)\.pipelines\release-nuget.config $(Build.SourcesDirectory)\nuget.config
                displayName: Add release package source
              - task: NuGetAuthenticate@1
              - task: DotNetCoreCLI@2
                inputs:
                  command: custom
                  custom: tool
                  arguments: install --tool-path . nbgv
                displayName: Install NBGV tool
              - script: nbgv cloud -c
                displayName: Set Version
              - task: PowerShell@2
                displayName: 'Generate LafConstants.cs'
                inputs:
                  targetType: 'inline'
                  script: |
                    $filePath = "$(Build.SourcesDirectory)/AIDevGallery/Generated/LafConstants.cs"
                    $dirPath = "$(Build.SourcesDirectory)/AIDevGallery/Generated"
                    if (-not (Test-Path $dirPath)) {
                      New-Item -ItemType Directory -Path $dirPath | Out-Null
                    }

                    $content = @(
                        "// Copyright (c) Microsoft Corporation. All rights reserved."
                        "// Licensed under the MIT License."
                        ""
                        "namespace AIDevGallery;"
                        ""
                        "/// <summary>"
                        "/// Provides LAF-related constants."
                        "/// </summary>"
                        "public static class LafConstants"
                        "{"
                        "  /// <summary>"
                        "  /// The authentication token for LAF."
                        "  /// </summary>"
                        "  public const string Token = `"$env:LAF_TOKEN`";"
                        ""
                        "  /// <summary>"
                        "  /// The publisher ID for LAF."
                        "  /// </summary>"
                        "  public const string PublisherId = `"$env:LAF_PUBLISHER_ID`";"
                        "}"
                    )

                    $content = $content | ForEach-Object { $_.TrimEnd() }
                    while ($content.Count -gt 0 -and $content[-1] -eq "") {
                        $content = $content[0..($content.Count - 2)]
                    }
                    $finalContent = $content -join "`n"
                    $writer = [System.IO.StreamWriter]::new($filePath, $false, [System.Text.Encoding]::UTF8)
                    for ($i = 0; $i -lt $content.Count; $i++) {
                        if ($i -lt $content.Count - 1) {
                            $writer.WriteLine($content[$i])
                        } else {
                            $writer.Write($content[$i])
                        }
                    }
                    $writer.Close()

                    Write-Output "Generated file path: $filePath"
                    if (Test-Path $filePath) {
                      Write-Output "File exists: $filePath"
                    } else {
                      Write-Output "File does not exist: $filePath"
                    }
                env:
                  LAF_TOKEN: $(LAF_TOKEN)
                  LAF_PUBLISHER_ID: $(LAF_PUBLISHER_ID)
              - task: DotNetCoreCLI@2
                inputs:
                  command: build
                  arguments: /p:LAF_TOKEN=$(LAF_TOKEN) /p:LAF_PUBLISHER_ID=$(LAF_PUBLISHER_ID)
              - template: ./.pipelines/templates/build.yaml@self
                parameters:
                  dotnet_configuration: ${{ dotnet_config }}
                  dotnet_platform: ${{ platform.dotnet_platform }}
